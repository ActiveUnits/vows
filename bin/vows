#!/usr/bin/env node

var path   = require('path'),
    sys    = require('sys'),
    fs     = require('fs'),
    exec   = require('child_process').exec,
    Script = process.binding('evals').Script;

require.paths.unshift(path.join(__dirname, '..', 'lib'));

var argv = [], options = {
    matcher: /.*/,
    brief: false
};

//
// Parse command-line parameters
//
for (var i = 0, arg; i < process.argv.length; i++) {
    arg = process.argv[i];

    if (arg === __filename) { continue }

    if (arg[0] !== '-') {
        argv.push(arg);
    } else {
        arg = arg.match(/^--?(.*)/)[1];

        if (arg[0] === 'R') {
            options.matcher = new(RegExp)(arg.slice(1));
        } else if (arg in options) {
            options[arg] = true;
        }
    }
}

// Get rid of process runner
// ('node' in most cases)
argv = argv.slice(1);

var vows = require('vows').config(options);

if (argv.length > 0) {
    argv.forEach(function (arg) {
        runTest(arg);
    });
} else {
    //
    // Watch mode
    //
    vows.options.brief = true;

    (function () {
        var clock = [
            '.   ', '..  ', '... ', ' ...',
            '  ..', '   .', '   .', '  ..',
            '... ', '..  ', '.   '
        ], wheel = [
            '-', '\\', '|', '/'
        ];
        var current = 0,
            status = 0,
            runningTests = false,
            gracePeriod = 0,
            statusText = '',
            lastRun,
            testFolder,
            colors = ['32m', '33m', '31m'],
            timer = setInterval(tick, 100),
            root = fs.readdirSync('.');

        if (root.indexOf('test') !== -1) {
            testFolder = 'test';
        } else if (root.indexOf('spec') !== -1) {
            testFolder = 'spec';
        } else {
            throw new(Error)("Couldn't find test folder");
        }

        cursorHide();

        // Run every 100ms
        function tick() {
            cursorSave();
            eraseLine();
            esc(colors[status]);

            if (runningTests || gracePeriod) {
                gracePeriod--;
                print(wheel[current]);
                esc('39m');
                print('    working...');
                if (current == wheel.length - 1) { current = -1 }
            } else {
                print(clock[current]);
                print(' ' + statusText);
                if (lastRun) {
                  esc('90m');
                  print( ' (' + lastRun.valueOf() + ')');
                }
                if (current == clock.length - 1) { current = -1 }
            }

            current++;
            esc('39m');
            cursorRestore();
        }

        //
        // Utility functions
        //
        function print(str)      { process.stdout.write(str) }
        function esc(str)        { print("\033[" + str) }
        function eraseLine()     { esc("2K") }
        function cursorSave()    { esc("s") }
        function cursorRestore() { esc("u") }
        function cursorHide()    { esc("?25l") }
        function cursorShow()    { esc("?25h") }
        function cleanup()       { cursorShow(), print('\n') }

        //
        // Called when a file has been modified.
        // Run the matching tests and change the status.
        //
        function changed(file) {
            runningTests = true;
            gracePeriod = 5;
            current = 0;

            file = /-(test|spec)$/.test(file) ? path.join(testFolder, file + '.js')
                                              : path.join(testFolder, file + '-' + testFolder + '.js');

            runTest(file).addListener('end', function (h, b, e) {
                runningTests = false;
                statusText = h + " honored, " +
                             b + " broken, "  +
                             e + " errored";
                lastRun = new(Date);

                if (b || e) {
                    eraseLine();
                    status = e ? 2 : 1;
                } else {
                    status = 0;
                }
            });
        }
        //
        // Recursively traverse a hierarchy, returning
        // a list of all relevant .js files.
        //
        function paths(dir) {
            var paths = [];

            try { fs.statSync(dir) }
            catch (e) { return [] }

            (function traverse(dir, stack) {
                stack.push(dir);
                fs.readdirSync(stack.join('/')).forEach(function (file) {
                    var path = stack.concat([file]).join('/'),
                        stat = fs.statSync(path);

                    if (file[0] == '.' || file === 'vendor') {
                        return;
                    } else if (stat.isFile() && /\.js$/.test(file)) {
                        paths.push(path);
                    } else if (stat.isDirectory()) {
                        traverse(file, stack);
                    }
                });
                stack.pop();
            })(dir || '.', []);

            return paths;
        }

        //
        // Watch all relevant files in lib/ and src/,
        // and call `changed()` on change.
        //
        [].concat(paths('lib'), paths('src'), paths(testFolder)).forEach(function (p) {
            fs.watchFile(p, function (current, previous) {
                if (new(Date)(current.mtime).valueOf() ===
                    new(Date)(previous.mtime).valueOf()) { return }
                else {
                    changed(path.basename(p, '.js'));
                }
            });
        });

        process.addListener('exit', cleanup);
        process.addListener('SIGINT', function () {
            cleanup();
            process.exit();
        });
        process.addListener('SIGQUIT', function () {
            changed();
        });
    })();
}

function runTest(file) {
    var code = (function (require, __filename, __dirname) {
        /* content */
        return vows.promise;
    }).toString().replace('/* content */', fs.readFileSync(file));

    return Script.runInThisContext('(' + code + ')', file)
          .call(global, require, file, path.dirname(file));
}

